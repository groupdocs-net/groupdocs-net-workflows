name: Update Code Examples

on:
  workflow_dispatch:
    inputs:
      groupdocs_library:
        description: 'Select library to update examples for'
        required: true
        default: 'GroupDocs.Conversion.LowCode'
        type: choice
        options:
          - GroupDocs.Conversion.LowCode
          #- GroupDocs.Merger.LowCode
          #- GroupDocs.Metadata.LowCode

run-name: Update code examples for ${{ inputs.groupdocs_library }} to latest version

jobs:
  update-examples:
    name: Update Code Examples
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.READ_PAT }}
          ref: main
          fetch-depth: 0

      - name: Get current and latest package versions
        id: version
        run: |
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          
          # Get current version from nuget-packages.json
          CURRENT_VERSION=$(jq -r --arg lib "$LIBRARY" '.[$lib]' nuget-packages.json)
          
          if [ "$CURRENT_VERSION" = "null" ]; then
            echo "Library $LIBRARY not found in nuget-packages.json"
            exit 1
          fi
          
          echo "Current version in nuget-packages.json: $CURRENT_VERSION"
          
          # Get latest version from NuGet API
          PACKAGE_ID_LOWER=$(echo "$LIBRARY" | tr '[:upper:]' '[:lower:]')
          echo "Querying NuGet API for package: $PACKAGE_ID_LOWER"
          
          NUGET_RESPONSE=$(curl -s "https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID_LOWER/index.json")
          
          if [ $? -ne 0 ] || [ -z "$NUGET_RESPONSE" ]; then
            echo "Failed to fetch package information from NuGet"
            exit 1
          fi
          
          # Extract latest version (last item in versions array)
          LATEST_VERSION=$(echo "$NUGET_RESPONSE" | jq -r '.versions[-1]')
          
          if [ "$LATEST_VERSION" = "null" ] || [ -z "$LATEST_VERSION" ]; then
            echo "Could not determine latest version from NuGet API response"
            echo "Response: $NUGET_RESPONSE"
            exit 1
          fi
          
          echo "Latest version on NuGet: $LATEST_VERSION"
          
          # Compare versions
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "Current version ($CURRENT_VERSION) is already the latest version"
            echo "has_update=false" >> $GITHUB_OUTPUT
          else
            echo "Update available: $CURRENT_VERSION -> $LATEST_VERSION"
            echo "has_update=true" >> $GITHUB_OUTPUT
          fi
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Set repository names
        id: repos
        run: |
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          
          case "$LIBRARY" in
            "GroupDocs.Conversion.LowCode")
              REPO_BASE="groupdocs-conversion-lowcode-examples"
              ;;
            "GroupDocs.Merger.LowCode")
              REPO_BASE="groupdocs-merger-lowcode-examples"
              ;;
            "GroupDocs.Metadata.LowCode")
              REPO_BASE="groupdocs-metadata-lowcode-examples"
              ;;
            *)
              echo "Unknown library: $LIBRARY"
              exit 1
              ;;
          esac
          
          echo "repo_base=$REPO_BASE" >> $GITHUB_OUTPUT
          echo "Repository base name: $REPO_BASE"

      - name: Update C# examples
        if: steps.version.outputs.has_update == 'true'
        id: update_csharp
        run: |
          REPO="groupdocs-net/${{ steps.repos.outputs.repo_base }}-csharp"
          VERSION="${{ steps.version.outputs.latest_version }}"
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          
          echo "Updating $REPO..."
          
          # Clone repository
          git clone https://${{ secrets.READ_PAT }}@github.com/$REPO.git csharp-examples
          cd csharp-examples
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Debug: List directory structure
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          if [ -d "Examples" ]; then
            echo "Examples directory found"
            echo "Examples directory contents:"
            ls -la Examples/
          else
            echo "Examples directory not found!"
          fi
          
          # Find and update .csproj files
          echo "Searching for .csproj files in Examples directory..."
          find Examples -name "*.csproj" -type f | while read -r file; do
            echo "Processing file: $file"
            if grep -q "PackageReference Include=\"$LIBRARY\"" "$file"; then
              echo "Found PackageReference in $file, updating version to $VERSION..."
              # Handle both self-closing and multi-line PackageReference formats
              sed -i "s/<PackageReference Include=\"$LIBRARY\" Version=\"[^\"]*\" \/>/<PackageReference Include=\"$LIBRARY\" Version=\"$VERSION\" \/>/g" "$file"
              sed -i "s/<PackageReference Include=\"$LIBRARY\" Version=\"[^\"]*\">/<PackageReference Include=\"$LIBRARY\" Version=\"$VERSION\">/g" "$file"
              echo "Updated $file"
            else
              echo "No matching PackageReference found in $file"
            fi
          done
          
          # Check for changes and commit
          if git diff --quiet; then
            echo "No changes in C# examples"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in C# examples"
            git add .
            git commit -m "Update $LIBRARY to version $VERSION"
            git push origin main
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Update F# examples
        if: steps.version.outputs.has_update == 'true'
        id: update_fsharp
        run: |
          REPO="groupdocs-net/${{ steps.repos.outputs.repo_base }}-fsharp"
          VERSION="${{ steps.version.outputs.latest_version }}"
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          
          echo "Updating $REPO..."
          
          # Clone repository
          git clone https://${{ secrets.READ_PAT }}@github.com/$REPO.git fsharp-examples
          cd fsharp-examples
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Debug: List directory structure
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          if [ -d "Examples" ]; then
            echo "Examples directory found"
            echo "Examples directory contents:"
            ls -la Examples/
          else
            echo "Examples directory not found!"
          fi
          
          # Find and update .fsproj files
          echo "Searching for .fsproj files in Examples directory..."
          find Examples -name "*.fsproj" -type f | while read -r file; do
            echo "Processing file: $file"
            if grep -q "PackageReference Include=\"$LIBRARY\"" "$file"; then
              echo "Found PackageReference in $file, updating version to $VERSION..."
              # Handle both self-closing and multi-line PackageReference formats
              sed -i "s/<PackageReference Include=\"$LIBRARY\" Version=\"[^\"]*\" \/>/<PackageReference Include=\"$LIBRARY\" Version=\"$VERSION\" \/>/g" "$file"
              sed -i "s/<PackageReference Include=\"$LIBRARY\" Version=\"[^\"]*\">/<PackageReference Include=\"$LIBRARY\" Version=\"$VERSION\">/g" "$file"
              echo "Updated $file"
            else
              echo "No matching PackageReference found in $file"
            fi
          done
          
          # Check for changes and commit
          if git diff --quiet; then
            echo "No changes in F# examples"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in F# examples"
            git add .
            git commit -m "Update $LIBRARY to version $VERSION"
            git push origin main
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Update VB.NET examples
        if: steps.version.outputs.has_update == 'true'
        id: update_vbnet
        run: |
          REPO="groupdocs-net/${{ steps.repos.outputs.repo_base }}-vbnet"
          VERSION="${{ steps.version.outputs.latest_version }}"
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          
          echo "Updating $REPO..."
          
          # Clone repository
          git clone https://${{ secrets.READ_PAT }}@github.com/$REPO.git vbnet-examples
          cd vbnet-examples
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Debug: List directory structure
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          if [ -d "Examples" ]; then
            echo "Examples directory found"
            echo "Examples directory contents:"
            ls -la Examples/
          else
            echo "Examples directory not found!"
          fi
          
          # Find and update .vbproj files
          echo "Searching for .vbproj files in Examples directory..."
          find Examples -name "*.vbproj" -type f | while read -r file; do
            echo "Processing file: $file"
            if grep -q "PackageReference Include=\"$LIBRARY\"" "$file"; then
              echo "Found PackageReference in $file, updating version to $VERSION..."
              # Handle both self-closing and multi-line PackageReference formats
              sed -i "s/<PackageReference Include=\"$LIBRARY\" Version=\"[^\"]*\" \/>/<PackageReference Include=\"$LIBRARY\" Version=\"$VERSION\" \/>/g" "$file"
              sed -i "s/<PackageReference Include=\"$LIBRARY\" Version=\"[^\"]*\">/<PackageReference Include=\"$LIBRARY\" Version=\"$VERSION\">/g" "$file"
              echo "Updated $file"
            else
              echo "No matching PackageReference found in $file"
            fi
          done
          
          # Check for changes and commit
          if git diff --quiet; then
            echo "No changes in VB.NET examples"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in VB.NET examples"
            git add .
            git commit -m "Update $LIBRARY to version $VERSION"
            git push origin main
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Update nuget-packages.json with latest version
        if: steps.version.outputs.has_update == 'true' && (steps.update_csharp.outputs.updated == 'true' || steps.update_fsharp.outputs.updated == 'true' || steps.update_vbnet.outputs.updated == 'true')
        run: |
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          OLD_VERSION="${{ steps.version.outputs.current_version }}"
          NEW_VERSION="${{ steps.version.outputs.latest_version }}"
          
          echo "Updating nuget-packages.json from version $OLD_VERSION to $NEW_VERSION for $LIBRARY"
          
          # Configure git for this repository
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Update the JSON file with the new version
          jq --arg lib "$LIBRARY" --arg ver "$NEW_VERSION" '.[$lib] = $ver' nuget-packages.json > tmp.json && mv tmp.json nuget-packages.json
          
          # Commit the change
          git add nuget-packages.json
          git commit -m "Update $LIBRARY from $OLD_VERSION to $NEW_VERSION

Examples repositories updated successfully:
- C# examples: ${{ steps.update_csharp.outputs.updated == 'true' && 'Updated' || 'Skipped' }}
- F# examples: ${{ steps.update_fsharp.outputs.updated == 'true' && 'Updated' || 'Skipped' }}
- VB.NET examples: ${{ steps.update_vbnet.outputs.updated == 'true' && 'Updated' || 'Skipped' }}

Generated by: ${{ github.workflow }}
Run ID: ${{ github.run_id }}
Triggered by: ${{ github.actor }}"
          git push origin main
          
          echo "nuget-packages.json updated successfully from $OLD_VERSION to $NEW_VERSION"

      - name: No update needed
        if: steps.version.outputs.has_update == 'false'
        run: |
          echo "No update needed. Current version ${{ steps.version.outputs.current_version }} is already the latest version available on NuGet."