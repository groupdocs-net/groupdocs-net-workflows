name: Update API References

on:
  workflow_dispatch:
    inputs:
      groupdocs_library:
        description: 'Select library to update references for'
        required: true
        default: 'GroupDocs.Conversion.LowCode'
        type: choice
        options:
          - GroupDocs.Conversion.LowCode
          #- GroupDocs.Merger.LowCode
          #- GroupDocs.Metadata.LowCode
      deploy_target:
        description: 'Deploy if there are updates?'
        required: true
        default: 'deploy to qa'
        type: choice
        options:
          - do not deploy
          - deploy to qa
          - deploy to prod

run-name: Update API refs for ${{ inputs.groupdocs_library }} (${{ inputs.deploy_target }})

env:
  AWS_REGION: us-west-2

jobs:
  update-refs:
    name: Update API References
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: groupdocs-net/groupdocs-net
          token: ${{ secrets.READ_PAT }}
          ref: main
          fetch-depth: 0

      - name: Set output folder
        id: setup
        run: |
          LIBRARY="${{ github.event.inputs.groupdocs_library }}"
          
          case "$LIBRARY" in
            "GroupDocs.Conversion.LowCode")
              OUTPUT_FOLDER="conversion"
              ;;
            "GroupDocs.Merger.LowCode")
              OUTPUT_FOLDER="merger"
              ;;
            "GroupDocs.Metadata.LowCode")
              OUTPUT_FOLDER="metadata"
              ;;
            *)
              echo "Unknown library: $LIBRARY"
              exit 1
              ;;
          esac
          
          echo "output_folder=$OUTPUT_FOLDER" >> $GITHUB_OUTPUT
          echo "Selected output folder: $OUTPUT_FOLDER"

      - name: Build Docker image
        run: |
          cd ./utils/api-refs-generator/
          docker build -t groupdocs-api-refs-generator .

      - name: Generate API references
        run: |
          cd ./utils/api-refs-generator/
          docker run --rm \
            -v "$(pwd)/../../content/reference.groupdocs.net/${{ steps.setup.outputs.output_folder }}/":/app/output \
            groupdocs-api-refs-generator \
            "${{ github.event.inputs.groupdocs_library }}"

      - name: Check for changes and commit
        run: |
          cd content/reference.groupdocs.net/
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes detected in reference content"
            echo "changes_detected=false" >> $GITHUB_ENV
          else
            echo "Changes detected, committing..."
            git add .
            git commit -m "Update API references for ${{ github.event.inputs.groupdocs_library }}
            
            Generated by: ${{ github.workflow }}
            Run ID: ${{ github.run_id }}
            Triggered by: ${{ github.actor }}"
            
            git push origin main
            echo "Changes committed and pushed successfully"
            echo "changes_detected=true" >> $GITHUB_ENV
          fi

      - name: Set deployment target
        if: env.changes_detected == 'true' && github.event.inputs.deploy_target != 'do not deploy'
        id: deploy_setup
        run: |
          DEPLOY_CHOICE="${{ github.event.inputs.deploy_target }}"
          
          case "$DEPLOY_CHOICE" in
            "deploy to qa")
              TARGET="qa"
              ;;
            "deploy to prod")
              TARGET="prod"
              ;;
            *)
              echo "No deployment selected"
              exit 0
              ;;
          esac
          
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "Selected deployment target: $TARGET"

      - name: Trigger deployment
        if: env.changes_detected == 'true' && github.event.inputs.deploy_target != 'do not deploy'
        run: |
          gh workflow run deploy_site.yml \
            --field target=${{ steps.deploy_setup.outputs.target }} \
            --field subdomain=reference
        env:
          GH_TOKEN: ${{ secrets.READ_PAT }}